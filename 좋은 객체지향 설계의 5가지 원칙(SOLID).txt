SOLID

SRP : 단일 책임 원칙(single responsibility principle)
OCP : 개방-폐쇄원칙 (Open/Closed principle)
LSP : 리스코프 치환 원칙(Liskov substitution principle)
ISP : 인터페이스 분리 원칙(Interface segregatino principle)
DIP : 의존관계 역전 원칙 (Dependancy inversion principle)

SRP :
 한 클래스는 하나의 책임만 가져야한다
	-> 변경이 있을때 파급이 적어야 한다.
	-> 책임의 범위를 잘 정해야 함

OCP:
소포트웨어는 확장에는 열려 있으나 변경에는 닫혀 있어야함
	-> 다형성을 활용하자
	-> 인터페이스,클래스(구현) 접근은 열려있으나
	     변경하지 말아야함
	-> 역할과 구현을 분리함
	-> 새로운 클래스를 만들어 기능 구현은 자유롭게

cf) 강의 예시의 MemoryRepsoitory-> JDBCRepository
 다형성을 활용했지만
 변경과정에서 Service의 코드를 변경해야함 -> OCP깨짐
 해결법 : 객체 생성,연관관계 조립을 해주는 설정자를 써야함

LSP :
 프로그램의 객체는 프로그램의 정확성을 깨지 않으면서
 하위 타입의 인스턴스로 바꿀 수 있어야 함
ex) 자동차 엑셀은 앞으로 가야한다(프로그램의 정확성)
->뒤로 가게 하면 LSP위반

ISP:
 특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 낫다 -> 기능 단위를 작게 설정
ex) 자동차 인터페이스 -> 운전 인터페이스, 정비 분리

DIP :
프로그래머는 추상화에 의존해야지 구체화에 의존하면 안됨
DI는 이 원칙을 따르는 방법중 하나다
->구현 클래스에 의존하지말고,인터페이스에 의존해야함
-> 역할(인터페이스)에 의존해야 함

cf)다형성만으로는 OCP,DIP를 지킬수 없음
-> DI와 DI컨테이너로 스프링에서는 이를 지키게 해준다.

cf)인터페이스가 항상 좋은게 아님 -> 추상화 메소드라 
구현코드를 계속 확인해줘야함
 -> 기능 확장이 없다면 구체 클래스를 사용